{"version":3,"sources":["hextile.js","App.js","serviceWorker.js","index.js"],"names":["makePolygon","verts","props","strokeColor","path_data","i","length","toFixed","fill","fillStyle","stroke","stroke-width","strokeWidth","d","makeArc","center","innerRadius","outerRadius","startAngle","endAngle","pt1","Math","cos","sin","pt2","pt3","pt4","r1","r2","fill_data","edge_data","makeStraight","start_pt","end_pt","width","dx","dy","scale","sqrt","n","makeTile","index","r","borderProps","ribbonProps","c","s","corners","PI","makeTile0","makeTile1","makeTile2","makeTile3","centers","makeTile4","randomInteger","floor","random","initialize_tiles","radius","xoff","yoff","points","j","y","lim","abs","x","push","generate_placement_points","map","e","angle","highlightTile","tiles","selected","xfm","transform","makeHighlight","App","state","highlightProps","oldTiles","newValue","result","this","setState","prevState","picked","old_tile","new_tile","replaceTile","keyCode","decrementAngle","incrementAngle","decrementIndex","incrementIndex","target","getScreenCTM","inverse","sx","round","clientX","sy","clientY","min_norm","tx","ty","norm","w","box","class","onKeyDown","keydown","bind","xmlns","height","h","viewBox","onClick","onclick","tabIndex","tile","pt","rotation","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80d9ce71.chunk.js","sourcesContent":["import React from 'react';\n\n// Creates a polygon connecting the supplied vertices.\n//\n// verts - The corners of the polygon. An array of 2-element arrays.\n// props - An object with values for fill, stroke, & stroke-width\n//\nfunction makePolygon(verts, props) {\n\n    if (props.strokeColor == 'none') {\n        return <></>\n    } else {\n        // generate path data from vertices\n        let path_data = '';\n        for (let i=0; i<verts.length; i++) {\n            path_data += (i===0?' M':' L');\n            path_data += ' ' + verts[i][0].toFixed(2) + ' '+ verts[i][1].toFixed(2);\n        };\n        path_data += ' Z';\n\n        // return path\n        return <path fill={props.fillStyle}\n                     stroke={props.strokeColor}\n                     stroke-width={props.strokeWidth}\n                     d={path_data} />\n    }\n}\n\n// Creates a wide arc with the specified center. Takes 2 radii. The innerRadius\n// should be positive, but smaller than outerRadius.\n//\n// Actually creates 2 paths. The first is filled with no outline. Then it creates\n// another that just draws the border. The reason for this is that it only wants the\n// borders on the round sides, not across the ends.\n//\n// center - A 2-element array with the X & Y coordinates of the center\n// innerRadius - The radius of the inside of the arc\n// outerRadius - The radius of the outside of the arc\n// startAngle - Angle in radians of the start of the arc\n// endAngle - Angle in radians of the end of the arc\n// props - An object with values for fill, stroke, & stroke-width\n//\nfunction makeArc(center, innerRadius, outerRadius, startAngle, endAngle, props) {\n\n    const pt1 = [(center[0] + outerRadius*Math.cos(startAngle)).toFixed(2),\n                 (center[1] + outerRadius*Math.sin(startAngle)).toFixed(2)];\n    const pt2 = [(center[0] + outerRadius*Math.cos(endAngle)).toFixed(2),\n                 (center[1] + outerRadius*Math.sin(endAngle)).toFixed(2)];\n    const pt3 = [(center[0] + innerRadius*Math.cos(endAngle)).toFixed(2),\n                 (center[1] + innerRadius*Math.sin(endAngle)).toFixed(2)];\n    const pt4 = [(center[0] + innerRadius*Math.cos(startAngle)).toFixed(2),\n                 (center[1] + innerRadius*Math.sin(startAngle)).toFixed(2)];\n    const r1 = innerRadius.toFixed(2);\n    const r2 = outerRadius.toFixed(2);\n\n    let fill_data = '';\n    fill_data += ' M ' + pt1[0] + ' ' + pt1[1];\n    fill_data += ' A ' + r2 + ' ' + r2\n        + ' ' + 0 + ' ' + 0 + ' ' + 1\n        + ' ' + pt2[0] + ' ' + pt2[1];\n    fill_data += ' L ' + pt3[0] + ' ' + pt3[1];\n    fill_data += ' A ' + r1 + ' ' + r1\n        + ' ' + 0 + ' ' + 0 + ' ' + 0\n        + ' ' + pt4[0] + ' ' + pt4[1];\n    fill_data += ' Z';\n\n    let edge_data = '';\n    edge_data += ' M ' + pt1[0] + ' ' + pt1[1];\n    edge_data += ' A ' + r2 + ' ' + r2\n        + ' ' + 0 + ' ' + 0 + ' ' + 1\n        + ' ' + pt2[0] + ' ' + pt2[1];\n    edge_data += ' M ' + pt3[0] + ' ' + pt3[1];\n    edge_data += ' A ' + r1 + ' ' + r1\n        + ' ' + 0 + ' ' + 0 + ' ' + 0\n        + ' ' + pt4[0] + ' ' + pt4[1];\n\n    return <>\n               <path fill={props.fillStyle}\n                     stroke=\"none\"\n                     stroke-width=\"0\"\n                     d={fill_data} />\n               <path fill=\"none\"\n                     stroke={props.strokeColor}\n                     stroke-width={props.strokeWidth}\n                     d={edge_data} />\n           </>\n}\n\n// Creates a wide line between 2 points.\n//\n// Actually creates 2 paths. The first is filled with no outline. Then it creates\n// another that just draws the border. The reason for this is that it only wants the\n// borders on the long sides, not across the ends.\n//\n// start_pt - A 2-element array with the X & Y coordinates of the start point\n// end_pt - A 2-element array with the X & Y coordinates of the end point\n// width - The width of the line\n// props - An object with values for fill, stroke, & stroke-width\n//\nfunction makeStraight(start_pt, end_pt, width, props) {\n    const dx = end_pt[0] - start_pt[0];\n    const dy = end_pt[1] - start_pt[1];\n    const scale = width / Math.sqrt(dx*dx + dy*dy);\n    const n = [-dy*scale, dx*scale];\n    const pt1 = [(start_pt[0] + n[0]).toFixed(2), (start_pt[1] + n[1]).toFixed(2)];\n    const pt2 = [(  end_pt[0] + n[0]).toFixed(2), (  end_pt[1] + n[1]).toFixed(2)];\n    const pt3 = [(  end_pt[0] - n[0]).toFixed(2), (  end_pt[1] - n[1]).toFixed(2)];\n    const pt4 = [(start_pt[0] - n[0]).toFixed(2), (start_pt[1] - n[1]).toFixed(2)];\n\n    let fill_data = '';\n    fill_data += ' M ' + pt1[0] + ' ' + pt1[1]\n        + ' L ' + pt2[0] + ' ' + pt2[1]\n        + ' L ' + pt3[0] + ' ' + pt3[1]\n        + ' L ' + pt4[0] + ' ' + pt4[1]\n        + ' Z ';\n    let edge_data = '';\n    edge_data = ' M ' + pt1[0] + ' ' + pt1[1]\n        + ' L ' + pt2[0] + ' ' + pt2[1]\n        + ' M ' + pt3[0] + ' ' + pt3[1]\n        + ' L ' + pt4[0] + ' ' + pt4[1];\n    return <>\n               <path fill={props.fillStyle}\n                     stroke=\"none\"\n                     stroke-width=\"0\"\n                     d={fill_data} />\n               <path fill=\"none\"\n                     stroke={props.strokeColor}\n                     stroke-width={props.strokeWidth}\n                     d={edge_data} />\n           </>\n}\n\n// Tile 0 has 3 arcs which connect neighboring sides\nfunction makeTile0(corners, r, borderProps, ribbonProps) {\n    const r1 = r / 3;\n    const r2 = r * 2 / 3;\n    return <>\n               { makeArc(corners[0], r1, r2,  Math.PI/6, 5*Math.PI/6, ribbonProps) }\n               { makeArc(corners[2], r1, r2,5*Math.PI/6, 9*Math.PI/6, ribbonProps) }\n               { makeArc(corners[4], r1, r2,9*Math.PI/6,13*Math.PI/6, ribbonProps) }\n               { makePolygon(corners, borderProps) }\n           </>\n}\n\n// Tile 1 has straight which goes directly across, and 2 arcs which connect the\n// neighboring sides on each side of that straight.\nfunction makeTile1(corners, r, borderProps, ribbonProps) {\n    const r1 = r / 3;\n    const r2 = r * 2 / 3;\n    const start_pt = [(corners[1][0]+corners[2][0])/2,\n                      (corners[1][1]+corners[2][1])/2];\n    const end_pt = [(corners[4][0]+corners[5][0])/2,\n                    (corners[4][1]+corners[5][1])/2];\n    return <>\n               { makeArc(corners[0], r1, r2,   Math.PI/6, 5*Math.PI/6, ribbonProps) }\n               { makeArc(corners[3], r1, r2,-5*Math.PI/6, -Math.PI/6, ribbonProps) }\n               { makeStraight(start_pt, end_pt, r/6, ribbonProps) }\n               { makePolygon(corners, borderProps) }\n           </>\n}\n\n// Tile 2 has 1 arc which connects a pair of neighboring sides and 2 longer arcs\n// which cross each other to connect pairs of the other 4 sides.\nfunction makeTile2(corners, r, borderProps, ribbonProps) {\n    const r1 = r / 3;\n    const r2 = r * 2 / 3;\n    const dx = corners[0][0] - corners[5][0];\n    const dy = corners[0][1] - corners[5][1];\n    const pt1 = [corners[0][0] + dx, corners[0][1] + dy];\n    const pt2 = [corners[0][0] - dx, corners[0][1] + dy];\n    return <>\n               { makeArc(pt1, r+r1, r+r2,  3*Math.PI/6, 5*Math.PI/6, ribbonProps) }\n               { makeArc(pt2, r+r1, r+r2,  1*Math.PI/6, 3*Math.PI/6, ribbonProps) }\n               { makeArc(corners[3], r1, r2,-5*Math.PI/6, -Math.PI/6, ribbonProps) }\n               { makePolygon(corners, borderProps) }\n           </>\n}\n\n// Tile 3 has 1 straight which goes directly across, and 2 long arcs which cross that\n// to connect non-adjacent sides.\nfunction makeTile3(corners, r, borderProps, ribbonProps) {\n    const r1 = r / 3;\n    const r2 = r * 2 / 3;\n    const dx = corners[0][0] - corners[5][0];\n    const dy = corners[0][1] - corners[5][1];\n    const pt1 = [corners[0][0] + dx, corners[0][1] + dy];\n    const pt2 = [corners[3][0] - dx, corners[3][1] - dy];\n    const start_pt = [(corners[0][0]+corners[1][0])/2,\n                      (corners[0][1]+corners[1][1])/2];\n    const end_pt = [(corners[3][0]+corners[4][0])/2,\n                    (corners[3][1]+corners[4][1])/2];\n    return <>\n               { makeArc(pt1, r+r1, r+r2,  3*Math.PI/6, 5*Math.PI/6, ribbonProps) }\n               { makeStraight(start_pt, end_pt, r/6, ribbonProps) }\n               { makeArc(pt2, r+r1, r+r2, -3*Math.PI/6, -1*Math.PI/6, ribbonProps) }\n               { makePolygon(corners, borderProps) }\n           </>\n}\n\n// Tile 4 has 3 straights which each connect opposite sides. They all cross in\n// the center.\nfunction makeTile4(corners, r, borderProps, ribbonProps) {\n    const centers = [[(corners[0][0]+corners[1][0])/2,\n                      (corners[0][1]+corners[1][1])/2],\n                     [(corners[1][0]+corners[2][0])/2,\n                      (corners[1][1]+corners[2][1])/2],\n                     [(corners[2][0]+corners[3][0])/2,\n                      (corners[2][1]+corners[3][1])/2],\n                     [(corners[3][0]+corners[4][0])/2,\n                      (corners[3][1]+corners[4][1])/2],\n                     [(corners[4][0]+corners[5][0])/2,\n                      (corners[4][1]+corners[5][1])/2],\n                     [(corners[5][0]+corners[0][0])/2,\n                      (corners[5][1]+corners[0][1])/2]];\n    return <>\n               { makeStraight(centers[0], centers[3], r/6, ribbonProps) }\n               { makeStraight(centers[1], centers[4], r/6, ribbonProps) }\n               { makeStraight(centers[2], centers[5], r/6, ribbonProps) }\n               { makePolygon(corners, borderProps) }\n           </>\n}\n\nfunction makeHighlight(r, props) {\n    const c = r * Math.sqrt(3)/2;\n    const s = r/2;\n    const corners = [[0, -r],\n                     [c, -s],\n                     [c, s],\n                     [0, r],\n                     [-c, s],\n                     [-c,-s]];\n    return makePolygon(corners, props);\n}\n\n// Return an SVG object that draws the specified tile\n// index - Which tile (0-4)\n// r - Radius\n// borderProps - Properties for the outer border\n// ribbonProp - Properties for the ribbons\nfunction makeTile(index, r, borderProps, ribbonProps) {\n    const c = r * Math.sqrt(3)/2;\n    const s = r/2;\n    const corners = [[0, -r],\n                     [c, -s],\n                     [c, s],\n                     [0, r],\n                     [-c, s],\n                     [-c,-s]];\n    switch (index) {\n    case 0:\n        return makeTile0(corners, r, borderProps, ribbonProps);\n    case 1:\n        return makeTile1(corners, r, borderProps, ribbonProps);\n    case 2:\n        return makeTile2(corners, r, borderProps, ribbonProps);\n    case 3:\n        return makeTile3(corners, r, borderProps, ribbonProps);\n    case 4:\n    default:\n        return makeTile4(corners, r, borderProps, ribbonProps);\n    }\n}\n\nexport {makeHighlight, makeTile};\n","import React from 'react';\nimport './App.css';\nimport {makeHighlight, makeTile} from './hextile.js';\n\n// Generate placement points for tiles\nfunction generate_placement_points(r, n) {\n    const xoff = r * Math.sqrt(3);\n    const yoff = 1.5 * r;\n\n    let points = [];\n    for (let j=-n; j<=n; j++) {\n        const y = j*yoff;\n        const lim = 2*n-Math.abs(j);\n        for (let i=-lim; i<=lim; i+=2) {\n            const x = i*xoff/2;\n            points.push([x, y]);\n        }\n    }\n    return points;\n}\n\nfunction randomInteger(n) {\n    return Math.floor(Math.random() * Math.floor(n));\n}\n\nfunction initialize_tiles(radius) {\n    const pts = generate_placement_points(radius, 5);\n    return pts.map(function(e) {\n        return { x: e[0], y: e[1], index: randomInteger(5), angle: randomInteger(6) };\n    });\n}\n\nfunction highlightTile(tiles, radius, selected, props) {\n    if (selected >= 0 && selected < tiles.length) {\n        const x = tiles[selected].x;\n        const y = tiles[selected].y;\n        const xfm = \"translate(\" + x.toFixed(2) + \" \" + y.toFixed(2) + \")\";\n        return <g transform={xfm}>\n                   {makeHighlight(radius, props)}\n               </g>\n    } else {\n        return <></>\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            radius: 52,\n            scale: 12,\n            tiles: initialize_tiles(52),\n            selected: -1\n        };\n\n        // show borders\n        // this.borderProps = {\n        //     fillStyle: \"none\",\n        //     strokeColor: \"#DA6\",\n        //     strokeWidth: \"4\"\n        // };\n\n        // don't show borders\n        this.borderProps = {\n            fillStyle: \"none\",\n            strokeColor: \"none\",\n            strokeWidth: \"0\"\n        };\n\n        this.ribbonProps = {\n            fillStyle: \"#FE9\",\n            strokeColor: \"#8A2\",\n            strokeWidth: \"5\"\n        };\n        this.highlightProps = {\n            fillStyle: \"#EEE\",\n            stroke: \"none\",\n            strokeWidth: \"1\"};\n    }\n\n    replaceTile(oldTiles, index, newValue) {\n        if (index < 0 || index >= oldTiles.length) {\n            return oldTiles;\n        } else {\n            let result = [];\n            for (let i=0; i<oldTiles.length; i++) {\n                if (i == index) {\n                    result.push(newValue);\n                } else {\n                    result.push(oldTiles[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    decrementAngle() {\n        this.setState((prevState) => {\n            let tiles = prevState.tiles;\n            let picked = prevState.selected;\n            if (picked >= 0 && picked < tiles.length) {\n                const old_tile = prevState.tiles[picked];\n                const new_tile = { x: old_tile.x,\n                                   y: old_tile.y,\n                                   index: old_tile.index,\n                                   angle: (old_tile.angle + 5)%6\n                                 };\n                tiles = this.replaceTile(prevState.tiles, prevState.selected, new_tile);\n            }\n            return {\n                radius: prevState.radius,\n                scale: prevState.scale,\n                tiles: tiles,\n                selected: picked\n            }\n        });\n    }\n\n    incrementAngle() {\n        this.setState((prevState) => {\n            let tiles = prevState.tiles;\n            let picked = prevState.selected;\n            if (picked >= 0 && picked < tiles.length) {\n                const old_tile = prevState.tiles[picked];\n                const new_tile = { x: old_tile.x,\n                                   y: old_tile.y,\n                                   index: old_tile.index,\n                                   angle: (old_tile.angle + 1)%6\n                                 };\n                tiles = this.replaceTile(prevState.tiles, prevState.selected, new_tile);\n            }\n            return {\n                radius: prevState.radius,\n                scale: prevState.scale,\n                tiles: tiles,\n                selected: picked\n            }\n        });\n    }\n\n    decrementIndex() {\n        this.setState((prevState) => {\n            let tiles = prevState.tiles;\n            let picked = prevState.selected;\n            if (prevState.selected >= 0 && prevState.selected < tiles.length) {\n                const old_tile = prevState.tiles[picked];\n                const new_tile = { x: old_tile.x,\n                                   y: old_tile.y,\n                                   index: (old_tile.index + 4)%5,\n                                   angle: old_tile.angle\n                                 };\n                tiles = this.replaceTile(prevState.tiles, prevState.selected, new_tile);\n            }\n            return {\n                radius: prevState.radius,\n                scale: prevState.scale,\n                tiles: tiles,\n                selected: picked\n            }\n        });\n    }\n\n    incrementIndex() {\n        this.setState((prevState) => {\n            let tiles = prevState.tiles;\n            let picked = prevState.selected;\n            if (prevState.selected >= 0 && prevState.selected < tiles.length) {\n                const old_tile = prevState.tiles[picked];\n                const new_tile = { x: old_tile.x,\n                                   y: old_tile.y,\n                                   index: (old_tile.index + 1)%5,\n                                   angle: old_tile.angle\n                                 };\n                tiles = this.replaceTile(prevState.tiles, prevState.selected, new_tile);\n            }\n            return {\n                radius: prevState.radius,\n                scale: prevState.scale,\n                tiles: tiles,\n                selected: picked\n            }\n        });\n    }\n\n    keydown(e) {\n        const ARROW_LEFT = 37;\n        const ARROW_UP = 38;\n        const ARROW_RIGHT = 39;\n        const ARROW_DOWN = 40;\n\n        switch (e.keyCode) {\n        case ARROW_LEFT:\n            this.decrementAngle();\n            break;\n        case ARROW_RIGHT:\n            this.incrementAngle();\n            break;\n        case ARROW_UP:\n            this.decrementIndex();\n            break;\n        case ARROW_DOWN:\n            this.incrementIndex();\n            break;\n\n        case 187:\n            this.setState((prevState) => {\n                const picked = prevState.selected+1;\n                return {\n                    radius: prevState.radius,\n                    scale: prevState.scale,\n                    tiles: prevState.tiles,\n                    selected: picked\n                }\n            });\n            break;\n        case 189:\n            this.setState((prevState) => {\n                const picked = prevState.selected-1;\n                return {\n                    radius: prevState.radius,\n                    scale: prevState.scale,\n                    tiles: prevState.tiles,\n                    selected: picked\n                }\n            });\n            break;\n        default:\n            break;\n        }\n    }\n\n    onclick(e) {\n        const mat = e.target.getScreenCTM().inverse();\n        const sx = Math.round(e.clientX * 2 - 530);\n        const sy = Math.round(e.clientY * 2 - 615.625);\n        this.setState((prevState) => {\n            let picked = -1;\n            let min_norm = 1000000;\n            for (let i=0; i<prevState.tiles.length; i++) {\n                const tx = prevState.tiles[i].x;\n                const ty = prevState.tiles[i].y;\n                const dx = sx - tx;\n                const dy = sy - ty;\n                const norm = (dx*dx + dy*dy);\n                if (norm < prevState.radius*prevState.radius) {\n                    if (norm < min_norm) {\n                        picked = i;\n                        min_norm = norm;\n                    }\n                }\n            }\n            return {radius: prevState.radius,\n                    scale: prevState.scale,\n                    tiles: prevState.tiles,\n                    selected: picked\n                   }\n        });\n    }\n\n    render() {\n\n        const placeTiles = (tiles) => tiles.map((tile) => {\n            const pt = [tile.x, tile.y];\n            const index = tile.index;\n            const rotation = 60*tile.angle;\n            const xfm = \"translate(\" + pt[0].toFixed(2) + \" \" + pt[1].toFixed(2) + \") rotate(\" + rotation + \")\";\n            return <g transform={xfm}>\n                       {makeTile(index, this.state.radius, this.borderProps, this.ribbonProps) }\n                   </g>\n        });\n\n        const w = 1000;\n        const h = 960;\n        const box = [-w/2, -h/2, w, h];\n        return (\n            <div class=\"wrapper\" onKeyDown={this.keydown.bind(this)}>\n                <h2>Hex Tile Editor</h2>\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                     width={w/2}\n                     height={h/2}\n                     viewBox={box}\n                     onClick={ this.onclick.bind(this)}\n                     tabIndex=\"1\"\n                >\n                    <>\n                        {highlightTile(this.state.tiles, this.state.radius, this.state.selected, this.highlightProps)}\n                        {placeTiles(this.state.tiles)}\n                    </>\n                </svg>\n                <ul><li>Click to select tile</li><li>Up/Down Arrow to replace tile</li><li>Left/Right arrow to rotate tile</li></ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}